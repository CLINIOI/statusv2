require('dotenv').config();
const express = require('express');
const path = require('path');
const fs = require('fs');
const multer = require('multer');
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
const PORT = process.env.PORT || 3000;

// === –ü—É—Ç–∏ ===
const publicDir  = path.join(__dirname, 'public');
const htmlDir    = path.join(publicDir, 'html');
const dataDir    = path.join(publicDir, 'data');
const imagesDir  = path.join(dataDir, 'images');
const jsonFile   = path.join(dataDir, 'properties.json');

// === –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ –µ—Å—Ç—å ===
if (!fs.existsSync(imagesDir)) fs.mkdirSync(imagesDir, { recursive: true });

// === Telegram ===
const BOT_TOKEN  = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// === Multer ===
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, imagesDir),
  filename: (req, file, cb) => {
    const unique = Date.now() + '-' + Math.round(Math.random() * 1e9);
    cb(null, `${file.fieldname}-${unique}${path.extname(file.originalname)}`);
  }
});
const upload = multer({ storage });

// === Middleware ===
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(publicDir));

// === –†–æ—É—Ç—ã HTML ===
app.get('/', (req, res) => res.sendFile(path.join(htmlDir, 'index.html')));
app.get('/realty.html', (req, res) => res.sendFile(path.join(htmlDir, 'realty.html')));
app.get('/test2.html', (req, res) => res.sendFile(path.join(htmlDir, 'test2.html')));

// === POST: –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ===
app.post('/submit', upload.array('images'), (req, res) => {
  try {
    const { dealType, propertyType, title, currency, price, city, district, address, rooms, floor, totalFloors, areaTotal, areaLiving, areaKitchen, bathroomType, balcony, repair, description } = req.body;
    const images = req.files.map(f => path.posix.join('data', 'images', path.basename(f.path)));
    const property = {
      id: Date.now(),
      dealType,
      propertyType,
      title,
      currency,
      price: price ? Number(price) : null,
      location: { city, district, address },
      specs: {
        rooms: Number(rooms) || null,
        floor: Number(floor) || null,
        totalFloors: Number(totalFloors) || null,
        area: {
          total: Number(areaTotal) || null,
          living: Number(areaLiving) || null,
          kitchen: Number(areaKitchen) || null
        },
        bathroomType,
        balcony: balcony === 'true',
        repair
      },
      description: description || '',
      images,
      createdAt: new Date().toISOString()
    };
    const existing = fs.existsSync(jsonFile)
      ? JSON.parse(fs.readFileSync(jsonFile, 'utf-8'))
      : [];
    existing.push(property);
    fs.writeFileSync(jsonFile, JSON.stringify(existing, null, 2), 'utf-8');
    res.json({ success: true, property });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
  }
});

// === POST: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤ Telegram ===
app.post('/api/sendTelegram', async (req, res) => {
  try {
    const { mode, data } = req.body;
    if (!mode || typeof data !== 'object') return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' });

    const MODE_TITLES = {
      1: '–û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í',
      2: '–ü–û–õ–£–ß–ò–¢–¨ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ',
      4: '–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò',
      5: '–ó–ê–ü–†–û–°–ò–¢–¨ –ó–í–û–ù–û–ö',
      6: '–î–†–£–ì–û–ô –í–û–ü–†–û–°'
    };
    const MODE_HASHTAGS = {
      1: '#–û–¢–ó–´–í',
      2: '#–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø',
      4: '#–ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨',
      5: '#–ó–í–û–ù–û–ö',
      6: '#–î–†–£–ì–û–ô_–í–û–ü–†–û–°'
    };
    const FIELD_LABELS = {
      name: '–ò–º—è', contact: '–ö–æ–Ω—Ç–∞–∫—Ç', email: 'Email',
      question: '–í–æ–ø—Ä–æ—Å', review: '–û—Ç–∑—ã–≤', comments: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      address: '–ê–¥—Ä–µ—Å', property_type: '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      deal_type: '–¢–∏–ø —Å–¥–µ–ª–∫–∏', time: '–í—Ä–µ–º—è'
    };

    function escapeHtml(str = '') {
      return str.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function stars(rate) {
      const r = parseInt(rate, 10);
      return isNaN(r) ? '‚Äî' : '‚≠ê'.repeat(Math.max(0, Math.min(r, 5)));
    }

    const title = MODE_TITLES[mode] || `–§–û–†–ú–ê ${mode}`;
    const tag1 = MODE_HASHTAGS[mode] || '';
    const tag2 = '#–∞–∫—Ç—É–∞–ª—å–Ω–æ';
    const tag3 = `#–∞–∫—Ç—É–∞–ª—å–Ω–æ_${title.replace(/ /g, '_').toLowerCase()}`;
    const now = new Date().toLocaleString('ru-RU', { hour12: false });

    let text = `üî¥ <b>–ê–ö–¢–ò–í–ù–û</b>\n${tag1} ${tag2} ${tag3}\n\n‚úâÔ∏è <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${escapeHtml(title)}</b>\nüïí <i>${escapeHtml(now)}</i>\n`;

    for (const [key, value] of Object.entries(data)) {
      const label = FIELD_LABELS[key] || key;
      const val = key === 'rating' ? `${stars(value)} (${value})` : escapeHtml(value);
      text += `\n‚Ä¢ <b>${label}</b>: ${val}`;
    }

    await bot.sendMessage(CHANNEL_ID, text, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[{ text: '–û—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª', callback_data: `reacted_${mode}` }]]
      }
    });

    res.json({ success: true });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ Telegram:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ Telegram' });
  }
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
