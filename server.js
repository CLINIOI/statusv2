require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const TelegramBot = require("node-telegram-bot-api");

const app = express();

// === –ö–æ–Ω—Ñ–∏–≥ ===
const BOT_TOKEN  = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;
const PORT       = process.env.PORT || 3000;

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏–∫–∏ ===
// –ì–ª–∞–≤–Ω—ã–π: –¥–µ–ª–∞–µ–º –∫–æ—Ä–µ–Ω—å ‚Äî –∫–æ—Ä–Ω–µ–º
app.use(express.static(__dirname)); // <-- —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç /assets, /css, /html –∏ —Ç.–¥.
app.use(bodyParser.json());

// === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "html", "index.html"));
});

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const MODE_TITLES = {
  1: "–û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í",
  2: "–ü–û–õ–£–ß–ò–¢–¨ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ",
  4: "–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò",
  5: "–ó–ê–ü–†–û–°–ò–¢–¨ –ó–í–û–ù–û–ö",
  6: "–î–†–£–ì–û–ô –í–û–ü–†–û–°",
};
const MODE_HASHTAGS = {
  1: "#–û–¢–ó–´–í",
  2: "#–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø",
  4: "#–ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨",
  5: "#–ó–í–û–ù–û–ö",
  6: "#–î–†–£–ì–û–ô_–í–û–ü–†–û–°",
};
const FIELD_LABELS = {
  name: "–ò–º—è",
  contact: "–ö–æ–Ω—Ç–∞–∫—Ç",
  email: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞",
  question: "–í–æ–ø—Ä–æ—Å",
  review: "–û—Ç–∑—ã–≤",
  comments: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
  address: "–ê–¥—Ä–µ—Å",
  property_type: "–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
  deal_type: "–¢–∏–ø —Å–¥–µ–ª–∫–∏",
  time: "–í—Ä–µ–º—è",
};

function escapeHtml(str = "") {
  return str
    .toString()
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}
function stars(rating) {
  const n = Math.max(0, Math.min(5, parseInt(rating, 10) || 0));
  return n > 0 ? "‚≠ê".repeat(n) : "‚Äî";
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ ===
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º ===
app.post("/api/sendTelegram", async (req, res) => {
  try {
    const { mode, data } = req.body;
    if (!mode || typeof data !== "object") {
      return res.status(400).json({ error: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞" });
    }

    const title        = (MODE_TITLES[mode] || `–§–û–†–ú–ê ${mode}`).toUpperCase();
    const tagMain      = MODE_HASHTAGS[mode] || "";
    const tagActual    = "#–∞–∫—Ç—É–∞–ª—å–Ω–æ";
    const tagActualCat = `#–∞–∫—Ç—É–∞–ª—å–Ω–æ_${title.replace(/ /g, "_").toLowerCase()}`;
    const statusLine   = "üî¥ <b>–ê–ö–¢–ò–í–ù–û</b>";
    const now          = new Date().toLocaleString("ru-RU", { hour12: false });

    let text = [
      statusLine,
      `${escapeHtml(tagMain)} ${escapeHtml(tagActual)} ${escapeHtml(tagActualCat)}`,
      "",
      `‚úâÔ∏è <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${escapeHtml(title)}</b>`,
      `üïí <i>${escapeHtml(now)}</i>`,
      ""
    ].join("\n");

    for (let [key, value] of Object.entries(data)) {
      const v = value == null ? "" : value.toString();
      if (key === "rating") {
        text += `\n‚Ä¢ <b>–û—Ü–µ–Ω–∫–∞</b>: ${stars(v)} (${escapeHtml(v)})`;
      } else {
        const label = FIELD_LABELS[key] || key;
        text += `\n‚Ä¢ <b>${escapeHtml(label)}</b>: ${escapeHtml(v)}`;
      }
    }

    const opts = {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "–û—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª", callback_data: `reacted_${mode}` }]
        ]
      }
    };

    await bot.sendMessage(CHANNEL_ID, text, opts);
    res.json({ success: true });
  } catch (err) {
    console.error("Send error:", err);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª" ===
bot.on("callback_query", async (query) => {
  try {
    const { id, data, message } = query;
    if (!data.startsWith("reacted_")) return bot.answerCallbackQuery(id);

    const mode       = data.split("_")[1];
    const title      = (MODE_TITLES[mode] || `–§–û–†–ú–ê ${mode}`).toUpperCase();
    const tagMain    = MODE_HASHTAGS[mode] || "";
    const reactedTag = "#–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∞";
    const reactedCat = `#–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∞_${title.replace(/ /g, "_").toLowerCase()}`;

    const parts = message.text.split("\n\n");
    const body  = parts.slice(2).join("\n\n").trim();

    const newText = [
      "üü¢ <b>–û–¢–†–ï–ê–ì–ò–†–û–í–ê–ù–ê</b>",
      escapeHtml(tagMain),
      escapeHtml(reactedTag),
      escapeHtml(reactedCat),
      "",
      body
    ].join("\n");

    await bot.editMessageText(newText, {
      chat_id:    message.chat.id,
      message_id: message.message_id,
      parse_mode: "HTML",
      reply_markup: { inline_keyboard: [] }
    });

    await bot.answerCallbackQuery(id);
  } catch (err) {
    console.error("Callback error:", err);
    await bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏", show_alert: false });
  }
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
